(Heavily inspired by http://danshiebler.com/2018-11-10-category-solutions/)

Let C be a category with an object Either a b, an object c and a morphism m in C(Either a b, c). Let CxC be a product category with an object <a, b>, an object <c, c> and morphisms <i, j>, where i :: a -> c and j :: b -> c. Let Δc :: C -> CxC be the diagonal functor whose action on objects is Δc = <c, c>. Finally, let the Coproduct :: CxC -> C be a functor that maps <a, b> to Either a b. We want to show that:

(CxC)(<a, b>, Δc) ≅ C(Either a b, c)

The factorizer for Coproduct (as Either) is:

factorizer :: (a -> c) -> (b -> c) -> (Either a b -> c)
factorizer i j (Left a) = i a
factorizer i j (Right b) = j b

It produces a function m :: Either a b -> c.

But we have chosen C as Hask and CxC as the other category (maybe we could have chosen a different one). If factorizer is going to serve as a natural transformation between CxC and C, we need to pair up the argument functions:

factorizer' :: ((a -> c), (b -> c)) -> (Either a b -> c)
factorizer' (i, j) (Left a) = i a
factorizer' (i, j) (Right b) = j b

To get the inverse of this we switch the arguments:

factorizer_inv' :: (Either a b -> c) -> ((a -> c), (b -> c))
factorizer_inv' eabc = (\a -> eabc (Left a), \b -> eabc (Right b))

Since this implementation goes for any a, b and c, we get naturality in a, b and c for free.
