Challenge 1

psi . phi $ alpha =
psi (phi alpha) =
psi (alpha id) =
psi alpha id =
fmap id alpha =
alpha
=> psi . phi = id

phi . psi $ fa =
phi (psi fa) =
phi ((\fa \h -> fmap h fa) fa) =
phi (\h -> fmap h fa) =
(\h -> fmap h fa) id =
fmap id fa =
fa
=> phi . psi = id


Challenge 2

For example:

a :: () -- No morphisms other than identity morphisms
a = ()

fa1 :: Maybe ()
fa1 = Just ()

fa2 :: Maybe ()
fa2 = Nothing

alpha1 :: (() -> x) -> Maybe x
alpha1 ux = Just ux

alpha2 :: (() -> x) -> Maybe x
alpha2 ux =  Nothing

There are as many natural transformations from Reader () x to Maybe () as there are elements of Maybe () (that is, two).


Challenge 3

fa :: [()]
fa = [(), ()] -- For example (information = 2)

alpha :: (() -> b) -> [b]
alpha h = fmap h fa

anotherRepresentation :: (() -> b) -> [b]
anotherRepresentation = alpha -- [f (), f ()] (information = 2)

h :: () -> Int
h _ = 40

evaluatedRepresentation :: [Int]
evaluatedRepresentation = alpha h -- [40, 40] (information = 2)
