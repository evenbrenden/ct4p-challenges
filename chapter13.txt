Challenge 1

Consider two isomorphic monoids M and N that have isomorphisms f and g between them:

f :: M -> N
g :: N -> M

Let u be the unit element of M and m be any other elements (of M).
Let v be the unit element of N and n be any other elements (of N).
Since g is the inverse of f, we have:

g (f m) = m
g (f n) = n
f u = v
g v = u

=>

m * (g v) = m * u = m
n * (f u) = n * v = n

=>

g (n * (f u)) = (g n) * (g (f u)) = (g n) * (g v) = (g n) * u = g n

=>

n = n * (f u)

=>

(f u) is the right unit for all n in N. And:

g ((f u) * n) = (g (f u)) * (g n) = (g v) * (g n) = u * (g n) = g n

=>

n = (f u) * n

=>

(f u) is the left unit for all n in N. Because g is the inverse of f, it is injective
(one-to-one), and therefore these equations are valid for all ms in M and ns in N.

Challenge 3

Generator: ()

The free monoid for this generator is Monoid [()]: [()] ++ [()] = [(), ()]

I suppose a lot of containers will do (that are isomorphic to list).

This is isomorphic with the monoid for integer addition:

h :: [()] -> Int
h unitList = length unitList

h_inv :: Int -> [()]
h_inv number = replicate number ()
